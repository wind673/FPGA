// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2017 21:12:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Interface_bsp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Interface_bsp_vlg_sample_tst(
	in_clk_50M,
	in_clr,
	in_key_bus,
	in_uart_rx,
	sampler_tx
);
input  in_clk_50M;
input  in_clr;
input [4:1] in_key_bus;
input  in_uart_rx;
output sampler_tx;

reg sample;
time current_time;
always @(in_clk_50M or in_clr or in_key_bus or in_uart_rx)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Interface_bsp_vlg_check_tst (
	out_led_bus,
	out_uart_tx,
	sampler_rx
);
input [4:1] out_led_bus;
input  out_uart_tx;
input sampler_rx;

reg [4:1] out_led_bus_expected;
reg  out_uart_tx_expected;

reg [4:1] out_led_bus_prev;
reg  out_uart_tx_prev;

reg  out_uart_tx_expected_prev;

reg  last_out_uart_tx_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_led_bus_prev = out_led_bus;
	out_uart_tx_prev = out_uart_tx;
end

// update expected /o prevs

always @(trigger)
begin
	out_uart_tx_expected_prev = out_uart_tx_expected;
end



// expected out_uart_tx
initial
begin
	out_uart_tx_expected = 1'bX;
end 
// generate trigger
always @(out_led_bus_expected or out_led_bus or out_uart_tx_expected or out_uart_tx)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_led_bus = %b | expected out_uart_tx = %b | ",out_led_bus_expected_prev,out_uart_tx_expected_prev);
	$display("| real out_led_bus = %b | real out_uart_tx = %b | ",out_led_bus_prev,out_uart_tx_prev);
`endif
	if (
		( out_uart_tx_expected_prev !== 1'bx ) && ( out_uart_tx_prev !== out_uart_tx_expected_prev )
		&& ((out_uart_tx_expected_prev !== last_out_uart_tx_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_uart_tx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_uart_tx_expected_prev);
		$display ("     Real value = %b", out_uart_tx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_uart_tx_exp = out_uart_tx_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Interface_bsp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in_clk_50M;
reg in_clr;
reg [4:1] in_key_bus;
reg in_uart_rx;
// wires                                               
wire [4:1] out_led_bus;
wire out_uart_tx;

wire sampler;                             

// assign statements (if any)                          
Interface_bsp i1 (
// port map - connection between master ports and signals/registers   
	.in_clk_50M(in_clk_50M),
	.in_clr(in_clr),
	.in_key_bus(in_key_bus),
	.in_uart_rx(in_uart_rx),
	.out_led_bus(out_led_bus),
	.out_uart_tx(out_uart_tx)
);

// in_key_bus[1]
initial
begin
	in_key_bus[1] = 1'b0;
	in_key_bus[1] = #20000 1'b1;
	in_key_bus[1] = #30000 1'b0;
end 

// in_clk_50M
initial
begin
	in_clk_50M = 1'b0;
end 

Interface_bsp_vlg_sample_tst tb_sample (
	.in_clk_50M(in_clk_50M),
	.in_clr(in_clr),
	.in_key_bus(in_key_bus),
	.in_uart_rx(in_uart_rx),
	.sampler_tx(sampler)
);

Interface_bsp_vlg_check_tst tb_out(
	.out_led_bus(out_led_bus),
	.out_uart_tx(out_uart_tx),
	.sampler_rx(sampler)
);
endmodule

